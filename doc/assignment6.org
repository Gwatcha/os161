#+title: Assignment 6 - Virtual Memory

Relevant files include:
- [[../kern/include/page_table.h]]
- [[../kern/vm/page_table.c]]
- [[../kern/include/addrspace.h]]
- [[../kern/include/vm.h]]
- [[../kern/arch/mips/vm/vm.c]]

* Features

** DONE Core map

The core map is an array with an entry for each page of physical memory that is managed by the vm system
- Not all physical memory is available to the vm system

** DONE Page table data structure

The page table is a hashmap virtual to physical page indices

** TODO Manage kernel process memory with page table

** DONE Manage user process memory with page table

** TODO Implement sbrk
Assignee: Michael

** TODO Free pages when user processes exit
Assignee: Michael

** TODO Come up with a better TLB scheme

** TODO Finish implementation of page_file.c
Assignee: Michael

** TODO Use page file

** TODO Share readonly program memory between processes

* Other improvements

** TODO Move coremap to its own .h/.c file
Assignee: Michael

This will help to provide better encapsulation
- Conversion between coremap indices and physical page numbers is error prone
- Encapsulation may help with this

* Bugs

* Tests

~Run all tests with 512 KB of RAM and 5 MB swap.~

** DONE km1 (10 pts)

** DONE km2 (10 pts)

** km3 (10 pts)
km3 takes a numeric parameter.
km3 status by testing different powers of two:
- Passing km3 2048
- Failing km3 4096

I believe that completing [[Manage kernel process memory with page table]] will allow us to pass km3 with very large inputs.

** TODO forktest (7.5 pts)

** TODO multiexec (7.5 pts)

** TODO sbrktest (3.5 pts)
Skip tests 9-11

** TODO malloctest (3.5 pts)
Skip tests 9-11


