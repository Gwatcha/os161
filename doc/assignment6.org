#+title: Assignment 6 - Virtual Memory

Relevant files include:
- [[../kern/include/page_table.h]]
- [[../kern/vm/page_table.c]]
- [[../kern/include/addrspace.h]]
- [[../kern/include/vm.h]]
- [[../kern/arch/mips/vm/vm.c]]

* Features

** DONE Core map

The core map is an array with an entry for each page of physical memory that is managed by the vm system
- Not all physical memory is available to the vm system

** DONE Page table data structure

The page table is a hashmap virtual to physical page indices

** TODO Manage kernel process memory with page table

** DONE Manage user process memory with page table

** DONE Implement sbrk
Estimate: 4 hours
Assignee: Michael

** TODO Free pages when user processes exit
Estimate: 2 hours
Assignee: Michael

** TODO Come up with a better TLB scheme

** DONE Finish implementation of page_file.c
   Estimate: 4 hours
Assignee: Michael

** TODO Use page file

** TODO Share readonly program memory between processes

* Other improvements

** DONE Move coremap to its own .h/.c file
Estimate: 4 hours
Assignee: Michael

This will help to provide better encapsulation
- Conversion between coremap indices and physical page numbers is error prone
- Encapsulation may help with this

** TODO Extend stack dynamically rather than allocating virtual pages up front

* Bugs

* Tests

Pass 1: Run all tests with 512 KB of RAM and 5 MB swap.
Pass 2: Re-run all the tests with 16MB of RAM.
- For any test that passes, give 1/2 the mark of the points assigned for passing it with 512KB.

** 512KB RAM

*** DONE km1 (10 pts)

*** DONE km2 (10 pts)

*** km3 (10 pts)
km3 takes a numeric parameter.
km3 status by testing different powers of two:
- Passing km3 2048
- Failing km3 4096

I believe that completing [[Manage kernel process memory with page table]] will allow us to pass km3 with very large inputs.

*** TODO forktest (7.5 pts)

*** TODO multiexec (7.5 pts)

***  14/18 sbrktest (3.5 pts)
**** [X]  1  Allocate one page
**** [X]  2  Allocate and free one page
**** [X]  3  Allocate and free several pages
**** [X]  4  Allocate several pages and free them one at a time
**** [X]  5  Check the heap end (crashes)
**** [X]  6  Allocate and check the heap end (crashes)
**** [X]  7  Allocate and free and check the heap end (crashes)
**** [X]  8  Allocate several, free some, check heap end (crashes)
**** [X] 12  Fork and then allocate
**** [X] 13  Allocate and then fork
**** [X] 14  Allocate and then fork and free
**** [X] 15  Allocate, fork, allocate more, and free (and spam)
**** [ ] 16  Small stress test
     Out of memory
**** [ ] 17  Randomized small stress test
     Out of memory
**** [ ] 18  Small stress test with particular seed
     Out of memory
**** [ ] 19  Large stress test
     Out of memory

If you run a test after running one before, it sometimes dosen't work (get could
not get a page). The X's are assuming the system is freshly booted.



*** 2/7 malloctest (3.5 pts)
**** [X] 1  Simple allocation test
**** [ ] 2  Allocate all memory in a big chunk
vm: Ran out of memory! Fatal user mode trap 3 sig 11 (TLB miss on store, epc0x4007c4, vaddr 0xbae000)
**** [ ] 3  Allocate all memory in small chunks
........................Fatal user mode trap 2 sig 11 (TLB miss on load, epc 0x401620, vaddr 0x451000)
**** [X] 4  Free list coalescing test (first/next/best-fit only)
**** [ ] 5  Stress test
     vm: ran out of memory!
**** [ ] 6  Randomized stress test
**** [ ] 7  Stress test with particular seed


*** TODO huge (1 pt)

*** DONE palin (1 pt)

*** TODO matmult (1 pt)

*** TODO triplemat (1 pt)

*** TODO quintmat (1 pt)

*** TODO sort (1 pt)
   * Ran out of memoery

*** TODO triplesort (1 pt)

*** TODO quintsort (1 pt)


** 16MB RAM

*** DONE km1 (10 pts)

*** DONE km2 (10 pts)

*** DONE km3 (10 pts)

*** DONE forktest (7.5 pts)

*** DONE multiexec (7.5 pts)

*** 15/18 sbrktest (3.5 pts)
**** [X]  1  Allocate one page
**** [X]  2  Allocate and free one page
**** [X]  3  Allocate and free several pages
**** [X]  4  Allocate several pages and free them one at a time
**** [X]  5  Check the heap end (crashes)
**** [X]  6  Allocate and check the heap end (crashes)
**** [X]  7  Allocate and free and check the heap end (crashes)
**** [X]  8  Allocate several, free some, check heap end (crashes)
**** [X] 12  Fork and then allocate
**** [X] 13  Allocate and then fork
**** [X] 14  Allocate and then fork and free
**** [X] 15  Allocate, fork, allocate more, and free (and spam)
**** [X] 16  Small stress test
**** [X] 17  Randomized small stress test
**** [X] 18  Small stress test with particular seed
**** [ ] 19  Large stress test
**** [ ] 20  Randomized large stress test
**** [ ] 21  Large stress test with particular seed


*** 5/7 malloctest (3.5 pts)
**** [X] 1  Simple allocation test
**** [ ] 2  Allocate all memory in a big chunk
vm: Ran out of memory! Fatal user mode trap 3 sig 11 (TLB miss on store, epc0x4007c4, vaddr 0xbae000)
**** [ ] 3  Allocate all memory in small chunks
........................Fatal user mode trap 2 sig 11 (TLB miss on load, epc 0x401620, vaddr 0x451000)
**** [X] 4  Free list coalescing test (first/next/best-fit only)
**** [X] 5  Stress test
**** [X] 6  Randomized stress test
**** [X] 7  Stress test with particular seed

Skip tests 9-11


*** TODO huge (1 pt) -- TLB Miss on store

*** DONE palin (1 pt)

*** TODO matmult (1 pt) -- TLB Miss on store (worked one time ?? )

*** TODO triplemat (1 pt)

*** TODO quintmat (1 pt)

*** TODO sort (1 pt)
   * Ran out of memoery

*** TODO triplesort (1 pt)

*** TODO quintsort (1 pt)

* Khdump
** After Multiexec 16MB
Remaining allocations from generation 3:
   16 bytes at 0x80045d70, allocated at 0x80012de0
   16 bytes at 0x80045eb0, allocated at 0x8000a7f0
   16 bytes at 0x80045ec0, allocated at 0x80021dbc
   16 bytes at 0x80045ed0, allocated at 0x8000a7f0
   16 bytes at 0x80045ee0, allocated at 0x80021dbc
   32 bytes at 0x8004f5a0, allocated at 0x80012de0
   32 bytes at 0x8004f5c0, allocated at 0x80012de0
   32 bytes at 0x8004f5e0, allocated at 0x80012de0
   32 bytes at 0x8004f600, allocated at 0x800218d0
   32 bytes at 0x8004f620, allocated at 0x8000a4d0
   32 bytes at 0x8004f640, allocated at 0x8001162c
   32 bytes at 0x8004f660, allocated at 0x80012de0
   32 bytes at 0x8004f680, allocated at 0x8001162c
   32 bytes at 0x8004f6a0, allocated at 0x80012de0
   32 bytes at 0x8004f6c0, allocated at 0x80012de0
   32 bytes at 0x8004f6e0, allocated at 0x800218d0
   32 bytes at 0x8004f700, allocated at 0x8000a4d0
   32 bytes at 0x8004f720, allocated at 0x8001162c
   32 bytes at 0x8004f840, allocated at 0x8001162c
panic: Fatal exception 4 (Address error on load) in kernel mode
panic: EPC 0x8002b854, exception vaddr 0x8005cfff
panic: I can't handle this... I think I'll just die now...
** After palin 16B
Remaining allocations from generation 3:
   32 bytes at 0x8004f840, allocated at 0x8001162c
panic: Fatal exception 4 (Address error on load) in kernel mode
